/*
 *  The scanner definition for COOL.
 */

/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
%{
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */
unsigned int comments=0;
%}

/*
 * Define names for regular expressions here.
 */

DIGIT		[0-9]
LETTER		[a-zA-Z]
FALSE		f[aA][lL][sS][eE]
TRUE		t[rR][uU][eE]
TYPEID		[A-Z][_a-zA-Z0-9]*
OBJECTID	[a-z][_a-zA-Z0-9]*
NEWLINE		[\n]
WHITESPACE	[ \t\r\f\v]+
ONELINE_COMM	"--"
NOT_NEW_LINE	[^\n]

END_COMM	[*)]

DARROW          =>
LE		<=
ASSIGN		<-


CLASS		(?i:class)
ELSE		(?i:else)
FI		(?i:fi)
IF		(?i:if)
IN		(?i:in)
INHERITS	(?i:inherits)
LET		(?i:let)
LOOP		(?i:loop)
POOL		(?i:pool)
THEN		(?i:then)
WHILE		[wW][hH][iI][lL][eE]
CASE		(?i:case)
ESAC		(?i:esac)
OF		(?i:of)
NEW		(?i:new)
ISVOID		(?i:isvoid)
NOT		(?i:not)



INT_CONST	{DIGIT}+	

QUOTES		\"


%x COMMENT
%x STRING
%x STRERROR

%%

 /*
  *  Nested comments
  */


 /*
  *  The multiple-character operators.
  */

"*)"			{ cool_yylval.error_msg = "Unmatched *)";
			  return (ERROR);
			}

"(*"			{ comments++;
			  BEGIN(COMMENT);
			}


<COMMENT>\n		{ curr_lineno++; }
<COMMENT>"(*"		{ comments++; }
<COMMENT>"*)"		{ comments--;
				  if(comments == 0)
					{
				  	BEGIN(INITIAL);
					} 
				}
<COMMENT>[^\n]			;

<COMMENT><<EOF>>		{ 
			  cool_yylval.error_msg = "EOF in comment";
			  BEGIN(INITIAL); 
			  
			  return (ERROR);
			  
			}



{ONELINE_COMM}{NOT_NEW_LINE}*	;
			


{QUOTES}		{ string_buf_ptr = string_buf;
			  BEGIN(STRING);
			}

<STRING>{QUOTES}		{
				if(string_buf_ptr - string_buf > MAX_STR_CONST-1)
					{
					BEGIN(INITIAL);
					cool_yylval.error_msg = "String constant too long";
					return (ERROR);
					}
				*string_buf_ptr = 0;
				cool_yylval.symbol = stringtable.add_string(string_buf);
				BEGIN(INITIAL);
				return STR_CONST;
				}

<STRING>\0		{ BEGIN(STRERROR);
			  cool_yylval.error_msg = "String contains null character";
			  return (ERROR);
			  
			}


<STRING>\n 		{
    			  curr_lineno++;
    			  BEGIN(INITIAL);
    			  cool_yylval.error_msg = "Unterminated string constant";
    			  return ERROR;
			}
<STRING><<EOF>>		{
				cool_yylval.error_msg = "EOF in string constant";
				BEGIN(INITIAL);
				return ERROR;
			}

<STRING>\\\0	  	{ BEGIN(STRERROR);
                    	  cool_yylval.error_msg = "String contains escaped null character.";
                    	  return (ERROR);
                	}

<STRING>"\\n"		{ curr_lineno++;
			  *string_buf_ptr++ = '\n';
			}
			
<STRING>"\\t"		*string_buf_ptr++ = '\t';
<STRING>"\\b"		*string_buf_ptr++ = '\b';
<STRING>"\\f"		*string_buf_ptr++ = '\f';
<STRING>"\\"[^\0]	*string_buf_ptr++ = yytext[1];
<STRING>.		*string_buf_ptr++ = *yytext;


<STRERROR>{QUOTES}         	{ BEGIN(INITIAL); }
<STRERROR>.     	;
<STRERROR>\n    	{ BEGIN(INITIAL); }

{WHITESPACE}		;
{CLASS}			{ return 258; }
{ELSE}			{ return 259; }
{FI}			{ return 260; }
{IF}			{ return 261; }
{IN}			{ return 262; }
{INHERITS}		{ return 263; }
{LET}			{ return 264; }
{LOOP}			{ return 265; }
{POOL}			{ return 266; }
{THEN}			{ return 267; }
{WHILE}			{ return (268); }
{CASE}			{ return 269; }
{ESAC}			{ return 270; }
{OF}			{ return 271; }
{DARROW}		{ return (DARROW); }
{NEW}			{ return 273; }
{ISVOID}		{ return 274; }
{ASSIGN}		{ return (ASSIGN); }
{NOT}			{ return 281; }
{LE}			{ return (LE); }

{TRUE}			{ cool_yylval.boolean = true;
			  return 277;
			}
{FALSE}			{ cool_yylval.boolean = false;
			  return 277;
 			}

{DIGIT}+		{ cool_yylval.symbol = inttable.add_string(yytext);
			  return 276;
			}
{TYPEID}		{ cool_yylval.symbol = idtable.add_string(yytext);
			  return 278;
			}
{OBJECTID}		{ cool_yylval.symbol = idtable.add_string(yytext);
			  return 279;
			}

{NEWLINE}		{ curr_lineno++; }
";"			{ return int(yytext[0]); }
"."			{ return int(yytext[0]); }
"-"			{ return int(yytext[0]); }
"("			{ return int(yytext[0]); }
"*"			{ return int(yytext[0]); }
")"			{ return int(yytext[0]); }
"{"			{ return int(yytext[0]); }
"}"			{ return int(yytext[0]); }
","			{ return int(yytext[0]); }
":"			{ return int(yytext[0]); }
"@"			{ return int(yytext[0]); }
"+"			{ return int(yytext[0]); }
"/"			{ return int(yytext[0]); }
"~"			{ return int(yytext[0]); }
"<"			{ return int(yytext[0]); }
"="			{ return int(yytext[0]); }

.			{ cool_yylval.error_msg = yytext;
			  return (ERROR);
			}			
 /*
  * Keywords are case-insensitive except for the values true and false,
  * which must begin with a lower-case letter.
  */


 /*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */


%%
